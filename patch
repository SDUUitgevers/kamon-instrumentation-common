diff --git a/build.sbt b/build.sbt
index 941f459..e2da9d8 100644
--- a/build.sbt
+++ b/build.sbt
@@ -6,9 +6,9 @@ lazy val kanelaKamonExtension = (project in file("."))
     moduleName := name.value,
     resolvers += Resolver.mavenLocal,
     libraryDependencies ++= Seq(
-      "io.kamon" %% "kamon-core"    % "2.0.0-20abd7cdb734fa6a5578a274931ec8d5eea9e06d",
-      "io.kamon" %  "kanela-agent"  % "0.0.17" % "provided",
-
+      "io.kamon" %% "kamon-core"    % "2.0.0-M3",
+      "io.kamon" %  "kanela-agent"  % "1.0.0-M1" % "provided",
       scalatest % "test"
     )
   )
+
diff --git a/src/main/java/kamon/instrumentation/context/java/InvokeWithCapturedContext.java b/src/main/java/kamon/instrumentation/context/java/InvokeWithCapturedContext.java
new file mode 100644
index 0000000..36430f2
--- /dev/null
+++ b/src/main/java/kamon/instrumentation/context/java/InvokeWithCapturedContext.java
@@ -0,0 +1,23 @@
+package kamon.instrumentation.context.java;
+
+import kamon.Kamon;
+import kamon.context.Storage;
+import kamon.instrumentation.context.HasContext;
+import kanela.agent.libs.net.bytebuddy.asm.Advice;
+
+/**
+ * Advice that sets the Context from a HasContext instance as the current Context while the advised method is invoked.
+ */
+public final class InvokeWithCapturedContext {
+
+    @Advice.OnMethodEnter(suppress = Throwable.class)
+    public static void onEnter(@Advice.This HasContext hasContext, @Advice.Local("scope") Storage.Scope scope) {
+        scope = Kamon.storeContext(hasContext.context());
+    }
+
+    @Advice.OnMethodExit(onThrowable = Throwable.class, suppress = Throwable.class)
+    public static void onExit(@Advice.Local("scope") Storage.Scope scope) {
+        scope.close();
+    }
+}
+
diff --git a/src/main/scala/kamon/instrumentation/context/CaptureCurrentContext.scala b/src/main/scala/kamon/instrumentation/context/CaptureCurrentContext.scala
index 5199924..d108250 100644
--- a/src/main/scala/kamon/instrumentation/context/CaptureCurrentContext.scala
+++ b/src/main/scala/kamon/instrumentation/context/CaptureCurrentContext.scala
@@ -9,7 +9,7 @@ import kanela.agent.libs.net.bytebuddy.asm.Advice
   */
 object CaptureCurrentContext {
 
-  @Advice.OnMethodExit
+  @Advice.OnMethodExit(onThrowable = classOf[Throwable], suppress = classOf[Throwable])
   def exit(@Advice.This hasContext: HasContext): Unit =
     hasContext.setContext(Kamon.currentContext())
 }
diff --git a/src/main/scala/kamon/instrumentation/context/InvokeWithCapturedContext.scala b/src/main/scala/kamon/instrumentation/context/InvokeWithCapturedContext.scala
index 5e37103..6a0eb81 100644
--- a/src/main/scala/kamon/instrumentation/context/InvokeWithCapturedContext.scala
+++ b/src/main/scala/kamon/instrumentation/context/InvokeWithCapturedContext.scala
@@ -11,11 +11,11 @@ import kanela.agent.libs.net.bytebuddy.asm.Advice
   */
 object InvokeWithCapturedContext {
 
-  @Advice.OnMethodEnter
+  @Advice.OnMethodEnter(suppress = classOf[Throwable])
   def enter(@Advice.This hasContext: HasContext): Storage.Scope =
     Kamon.storeContext(hasContext.context)
 
-  @Advice.OnMethodExit(onThrowable = classOf[Throwable])
+  @Advice.OnMethodExit(onThrowable = classOf[Throwable], suppress = classOf[Throwable])
   def exit(@Advice.Enter scope: Storage.Scope): Unit =
     scope.close()
 }
diff --git a/src/main/scala/kamon/instrumentation/package.scala b/src/main/scala/kamon/instrumentation/package.scala
index 7e9b127..ae0e427 100644
--- a/src/main/scala/kamon/instrumentation/package.scala
+++ b/src/main/scala/kamon/instrumentation/package.scala
@@ -17,7 +17,7 @@ package object instrumentation {
     def advise[A](method: Junction[MethodDescription], advice: A)(implicit singletonEvidence: A <:< Singleton): InstrumentationBuilder.Target
   }
 
-  implicit def adviseWithCompanionObject(target: InstrumentationBuilder.Target) = new AdviseWithCompanionObject {
+  implicit def adviseWithCompanionObject(target: InstrumentationBuilder.Target): AdviseWithCompanionObject = new AdviseWithCompanionObject {
 
     override def advise[A](method: Junction[MethodDescription], advice: A)(implicit singletonEvidence: A <:< Singleton): InstrumentationBuilder.Target = {
       // Companion object instances always have the '$' sign at the end of their class name, we must remove it to get
diff --git a/src/test/resources/application.conf b/src/test/resources/application.conf
index 74dd880..1cb6ae6 100644
--- a/src/test/resources/application.conf
+++ b/src/test/resources/application.conf
@@ -1,15 +1,28 @@
-kanela.modules {
-  has-context-mixin-spec {
-    name = "custom"
+kanela {
+  debug-mode = true
+  class-dumper {
+    # Enables the class dumper.
     enabled = true
-    inject-in-bootstrap = false
-    stoppable = false
-    instrumentations = [
-      "kamon.instrumentation.context.ContextInstrumentationSpec$Instrumentation"
-    ]
+    # Default dir.
+    dir = ${user.home}"/kanela-agent/dump"
+    # By default build a jar containing all instrumented classes.
+    create-jar = true
+    # Default jar name.
+    jar-name = "instrumented-classes-stack"
+  }
+  modules {
+    has-context-mixin-spec {
+      name = "custom"
+      enabled = true
+      inject-in-bootstrap = false
+      stoppable = false
+      instrumentations = [
+        "kamon.instrumentation.context.ContextInstrumentationSpec$Instrumentation"
+      ]
 
-    within = [
-      "kamon.instrumentation.context.*"
-    ]
+      within = [
+        "kamon.instrumentation.context.*"
+      ]
+    }
   }
 }
\ No newline at end of file
diff --git a/src/test/scala/kamon/instrumentation/context/ContextInstrumentationSpec.scala b/src/test/scala/kamon/instrumentation/context/ContextInstrumentationSpec.scala
index e2a16f4..41c38db 100644
--- a/src/test/scala/kamon/instrumentation/context/ContextInstrumentationSpec.scala
+++ b/src/test/scala/kamon/instrumentation/context/ContextInstrumentationSpec.scala
@@ -2,6 +2,7 @@ package kamon.instrumentation.context
 
 import kamon.Kamon
 import kamon.context.Context
+import kamon.instrumentation.context.java.InvokeWithCapturedContext
 import kamon.tag.TagSet
 import kanela.agent.api.instrumentation.InstrumentationBuilder
 import org.scalatest.{Matchers, WordSpec}
@@ -102,7 +103,7 @@ object ContextInstrumentationSpec {
     onType("kamon.instrumentation.context.ContextInstrumentationSpec$TargetWithInitializer")
       .mixin(classOf[HasContext.MixinWithInitializer])
       .advise(method("doSomething"), CaptureCurrentContext)
-      .advise(method("doWork"), InvokeWithCapturedContext)
+      .advise(method("doWork"), classOf[kamon.instrumentation.context.java.InvokeWithCapturedContext])
 
   }
 }
